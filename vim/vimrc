set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" better file explore
Plugin 'scrooloose/nerdtree'

" git plugin
Plugin 'tpope/vim-fugitive'

" check syntax
Plugin 'dense-analysis/ale'

" automatically pair brackets
Plugin 'jiangmiao/auto-pairs'

" wonderful youcompleteme
Plugin 'Valloric/YouCompleteMe'

" make things look better
Plugin 'prettier/vim-prettier'

" nice themes for vim
Plugin 'joshdick/onedark.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" undo tree visualiser
Plugin 'mbbill/undotree'

" FZF fuzzy file matcher
Plugin 'junegunn/fzf', { 'do': { -> fzf#install()  }  }
Plugin 'junegunn/fzf.vim'

" CMake stuff
Plugin 'richq/vim-cmake-completion'
Plugin 'vhdirk/vim-cmake'

" Gutentags
Plugin 'ludovicchabant/vim-gutentags'

" Python stuff
Plugin 'tell-k/vim-autopep8'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

nmap <C-P> :FZF<CR>

set encoding=utf-8

set ts=4
set sw=4

set expandtab
" Don't expand tabs in make files
autocmd FileType make setlocal noexpandtab

set hlsearch

" enable persistent undos
" Put plugins and dictionaries in this dir (also on Windows)
let vimDir = '$HOME/.vim'
let &runtimepath.=','.vimDir

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    let myUndoDir = expand(vimDir . '/undodir')
    " Create dirs
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
endif


nnoremap <F5> :UndotreeToggle<CR>
autocmd FileType python map <buffer> <F3> :call Flake8()<CR>

" get a lovely status message at the bottom
set laststatus=2
set statusline=%f\ \l\:%l(%L)\ \c%c\ \(%y\)%m "tail of the filename
set ruler

" allow copying to clipboard
vmap <F6> :!xclip -f -sel clip<CR>

" ALE settings
let g:ale_fix_on_save = 1

" Python settings
" Check Python files with flake8 and pylint.
let b:ale_linters = ['flake8', 'pylint']
" Fix Python files with autopep8 and yapf.
let b:ale_fixers = ['autopep8', 'yapf']


let g:ycm_global_ycm_extra_conf = "$HOME/.ycm_extra_conf.py"
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_auto_hover = 'GetType'

" set up ctags
set tags=./tags,tags;$HOME
set tags+=tags,$HOME/cpp_tags
noremap <F8> :!~/ctags_with_dep.sh<CR>

" CtrlP setup
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" clipboard
set clipboard=unnamedplus

color desert

set hlsearch
